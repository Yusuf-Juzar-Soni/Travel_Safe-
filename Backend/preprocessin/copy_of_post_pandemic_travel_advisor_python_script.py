# -*- coding: utf-8 -*-
"""Copy of post pandemic travel advisor Python Script.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wrOg2U_4W7GP9GRxVBPEDCD_CTjGyrBe
"""

#------------------- Divider -------------------------------------------------!

# Code for writing information to CSV file based on the new cases, recovered, and the score

#Imports the drive functionality
from google.colab import drive, files
from collections import defaultdict #Imports the defaultdict utility to create one-to-many mapping dictionaries
import csv
import os

countries = [] # A list for the countries, which will eventually be used for creating the different files

#drive.mount('/content/drive') #Mounts the drive to this file
#a = pd.read_csv('/content/drive') #The data file to read
a = pd.read_csv('/content/drive/My Drive/CMPE 272/CMPE 272 Project/covid_19_clean_complete 2.csv') #The data file to read
os.mkdir('/content/drive/My Drive/CMPE 272/CMPE 272 Project/' + 'country_data_files2/') #Creates the directory

Country_Column = a["Country/Region"]
initial_country_count = len(Country_Column)
print(len(a))

#print(a["Confirmed"][0])

for i in range(initial_country_count):
  if Country_Column[i] not in countries:
    countries.append(a["Country/Region"][i])

#One-time activity to create the files with its columns-------------------------------
for i in range(len(countries)):
  f = open("/content/drive/My Drive/CMPE 272/CMPE 272 Project/country_data_files2/" + countries[i] + ".csv", 'a')

  writer = csv.writer(f)
  writer.writerow(["Date", "Confirmed", "Recovered", "Active", "New cases/active", "Newly recovered/active", "(New cases - Newly recovered)/active"])
 # ------------------------------------------------------------------------------------------------


#Key and multi-value dictionaries


Confirmed_cases = a["Confirmed"]
dates = a["Date"]
recovered = a["Recovered"]
active = a["Active"]

country_confirmedcases_dictionary = defaultdict(list)   # Creates a list-based default dictionary
country_dates_dictionary = defaultdict(list)
country_recovered_dictionary = defaultdict(list)
country_active_dictionary = defaultdict(list)


len_of_total_values_from_file = len(a["Country/Region"])
print(len_of_total_values_from_file)
for j in range(len(a["Country/Region"])):
    country_confirmedcases_dictionary[a["Country/Region"][j]].append(Confirmed_cases[j])
    country_dates_dictionary[a["Country/Region"][j]].append(dates[j])
    country_recovered_dictionary[a["Country/Region"][j]].append(recovered[j])
    country_active_dictionary[a["Country/Region"][j]].append(active[j])


for i in range(len(countries)):   # Loops through the individual countries
    country = countries[i]        # Equates the country variable to the name of the country from list at a particular index
    for i in range(len(country_confirmedcases_dictionary[country])):      # Loops as per the length of the country-filtered subset of the overall data
      print("Country is: " + country)
      f = open("/content/drive/My Drive/CMPE 272/CMPE 272 Project/country_data_files2/" + country + ".csv", 'a')    #Sets up the append functionality
      writer = csv.writer(f)
      if country_active_dictionary[country][i] != 0:
        writer.writerow([str(country_dates_dictionary[country][i]), str(country_confirmedcases_dictionary[country][i]), str(country_recovered_dictionary[country][i]), str(country_active_dictionary[country][i]), str(country_confirmedcases_dictionary[country][i]/country_active_dictionary[country][i]), str(country_recovered_dictionary[country][i]/country_active_dictionary[country][i]), str((country_confirmedcases_dictionary[country][i] - country_recovered_dictionary[country][i])/(country_active_dictionary[country][i]))])